# BusinessCraft Mod - Implemented Features
Last Updated: March 4, 2023

## Features Implemented:
- Minecraft Forge mod for version 1.20.1
- Uses TOML configuration (toml4j library)
- Town system with town blocks that can be placed in the world
- Tourist vehicle management system
- Town data saving and loading on server start/stop
- Debug overlay for towns (toggle with F3+K)
- Command to clear towns
- Custom block entities
- Custom menu types
- Custom entity types
- Network message system for client-server communication 

## Resource System:
- Multi-resource town economy system that extends beyond just bread
- Any Minecraft item can be stored as a town resource
- Bread maintains special functionality for population growth
- Resource data is saved and loaded with NBT tags for persistence
- UI component to display resource amounts in town interface
- Resource consumption capabilities for future economic features
- Support for resource-specific buildings and features
- Legacy support maintained for bread-based economy
- Scrollable resource list with item icons and counts
- Resources sorted by quantity (highest first)
- Mouse wheel scrolling support for resource list

## Entity System:
- Custom Tourist entity with dedicated renderer
- Modular entity registration system
- Tourists based on villager model with custom hat layer
- Tourists shake when they're about to expire (last 30 seconds)
- Custom head, profession, and item layers for tourists
- Special tourist hat rendered on adult tourists only
- Custom texture for tourist hat
- Forge DeferredRegister system for entity registration
- Tourist entity sized like a regular villager (0.6 x 1.95)
- Entity attributes registered through Forge event system
- Tourists have random professions
- Tourists can't breed or pick up items
- Tourists notify origin town when they die
- Tourists notify origin town when they expire (if they've moved)
- Tourists get extended expiry time when riding vehicles
- Tourists track their origin and destination towns
- Tourists can be configured to expire after a set time

## Platform and Path System:
- Platform path creation mode for linking tourist locations
- ESC key exits platform path creation mode
- Network communication to synchronize path creation between client and server
- Path creation tied to specific town blocks and platforms

## Platform Path System:
- Platform path creation mode with click handling (PlatformPathHandler.java)
- Two-point path creation system (start and end points) (PlatformPathHandler.java)
- Server-side validation of path creation (PlatformPathHandler.java)
- Maximum distance limit for path points (PlatformPathHandler.java)
- Click debouncing to prevent rapid click issues (PlatformPathHandler.java)
- Player feedback messages during path creation (PlatformPathHandler.java)
- Automatic client notification when paths are created (PlatformPathHandler.java)
- Path creation state tracking (PlatformPathHandler.java)

## Town Path System:
- Town-level path creation mode with click handling (ModEvents.java)
- Two-point town path creation system (start and end points) (ModEvents.java)
- Server-side validation of town path creation (ModEvents.java)
- Distance validation for town paths (ModEvents.java)
- Click debouncing to prevent rapid click issues (ModEvents.java)
- Player feedback messages during town path creation (ModEvents.java)
- Town data provider integration for path persistence (ModEvents.java)
- Path creation state tracking (ModEvents.java)

## UI System:
- Tabbed interface for town management screens
- Accessible UI with narration support
- Consistent styling across different screens
- Modular UI component system for reusable interface elements
- Components for buttons, labels, text editing, and resource display
- Interactive UI elements with mouse and keyboard support
- Alternating row colors for better readability in lists

## Debug Features:
- Town Debug Overlay for visualizing town information
- Toggle Debug Overlay with F4 key
- Client-side debug visualization 
- Displays town position, population, bread count, tourist spawning status
- Shows path information and visitor statistics
- Scrollable interface for viewing multiple towns
- Auto-refreshes data from server every second
- Dedicated network channel for debug communication
- Server collects town data from all loaded dimensions
- Efficient data serialization for network transmission 

## Town UI System:
- Tabbed town interface for easy navigation (TownBlockScreen.java)
- Town info tab displays population and tourist stats (TownBlockScreen.java)
- Resources tab with scrollable resource list (TownBlockScreen.java)
- History tab for monitoring tourism activity (TownBlockScreen.java)
- Settings tab for town configuration (TownBlockScreen.java)
- Town name can be edited in-game (TownBlockScreen.java)
- Search radius can be adjusted for tourist mechanics (TownBlockScreen.java)
- Platform management UI for creating and editing platforms (TownBlockScreen.java)
- Path creation mode with visual instructions (TownBlockScreen.java)
- Dark background rendering for better visibility of platform UI (TownBlockScreen.java)
- Mouse wheel scrolling support in the UI (TownBlockScreen.java)
- Tooltip system for providing additional information (TownBlockScreen.java) 

## Platform Management:
- Dedicated platform management interface for towns (PlatformsTab.java)
- Add, delete, and configure tourist platforms (PlatformsTab.java)
- Enable/disable individual platforms to control tourist flow (PlatformsTab.java)
- Set paths between platforms for tourist navigation (PlatformsTab.java)
- Configure destinations for tourists to travel between towns (PlatformsTab.java)
- Stylish UI with hover effects and clear visual indicators (PlatformsTab.java)
- Scrollable platform list for towns with many platforms (PlatformsTab.java)
- Each platform shows its position number for easy identification (PlatformsTab.java)
- Visual indicators showing enabled/disabled status (green/red) (PlatformsTab.java)
- Modern gradient backgrounds with subtle borders for better readability (PlatformsTab.java)

## Destination System:
- Dedicated screen for managing inter-town connections (DestinationsScreen.java)
- Enable/disable specific town destinations for platforms (DestinationsScreen.java)
- Distance-based sorting of destinations (DestinationsScreen.java)
- Display of approximate distance to each destination town (DestinationsScreen.java)
- Directional indicators showing where destinations are located (DestinationsScreen.java)
- Scrollable destination list for towns with many connections (DestinationsScreen.java)
- Visual indicators showing enabled/disabled connection status (DestinationsScreen.java)
- Hover effects for better user interaction (DestinationsScreen.java)
- Multiple constructors supporting different levels of information (DestinationsScreen.java)

## UI Components:
- Reusable TabComponent for creating tabbed interfaces (TabComponent.java)
- Tab system with buttons that dynamically change content (TabComponent.java)
- Lazy initialization of tab content to improve performance (TabComponent.java)
- Support for named tabs with unique identifiers (TabComponent.java)
- Specialized tab rendering for platform management screens (TabComponent.java)
- Automatic button positioning based on available space (TabComponent.java)
- Visibility controls for showing/hiding UI elements (TabComponent.java)
- Data-bound button component that updates text dynamically (DataBoundButtonComponent.java)
- Reactive UI elements that respond to data changes (DataBoundButtonComponent.java)
- Customizable button sizing and positioning (DataBoundButtonComponent.java)
- Event handling for button interactions (DataBoundButtonComponent.java)
- Toggle button component for binary state controls (ToggleButtonComponent.java)
- Consistent button styling and behavior across UI (ToggleButtonComponent.java)
- Flexible positioning system for UI elements (ToggleButtonComponent.java)
- Item slot component for resource input (SlotComponent.java)
- Visual highlighting of item slots (SlotComponent.java)
- Town name editor with text input and confirmation buttons (TownNameEditorComponent.java)
- Keyboard shortcuts for UI navigation (Enter to confirm, Escape to cancel) (TownNameEditorComponent.java)
- Composite UI components that combine multiple elements (TownNameEditorComponent.java)
- Focus management for text input fields (TownNameEditorComponent.java)
- Proper event handling for mouse and keyboard interactions (TownNameEditorComponent.java)
- Text input field component with validation and callbacks (EditBoxComponent.java)
- Character limit enforcement for text inputs (EditBoxComponent.java)
- Text field focus management for better keyboard navigation (EditBoxComponent.java)
- Real-time text change notifications (EditBoxComponent.java)
- Dynamic data label component for displaying changing information (DataLabelComponent.java)
- Customizable text color for UI elements (DataLabelComponent.java)
- Width-constrained text display (DataLabelComponent.java)
- Visit history tracking with timestamps and origin information (VisitHistoryComponent.java)
- Scrollable history list with alternating row colors (VisitHistoryComponent.java)
- Mouse wheel scrolling support for history navigation (VisitHistoryComponent.java)
- Direction and distance indicators for tourist origins (VisitHistoryComponent.java)
- Time formatting for visit timestamps (VisitHistoryComponent.java)
- Empty state handling with informative messages (VisitHistoryComponent.java) 

## Network System:
- Comprehensive network packet system for client-server communication (ModMessages.java)
- Automatic packet ID management to prevent conflicts (ModMessages.java)
- Support for both client-to-server and server-to-client messages (ModMessages.java)
- Targeted packet sending to specific players or chunk trackers (ModMessages.java)
- Consistent packet registration pattern for all message types (ModMessages.java)
- Network protocol versioning for compatibility (ModMessages.java)
- Main thread packet handling for thread safety (ModMessages.java)
- Platform destination packets for inter-town tourism connections (SetPlatformDestinationPacket.java)
- Cardinal direction calculation for destination indicators (SetPlatformDestinationPacket.java)
- Distance calculation between towns for destination UI (SetPlatformDestinationPacket.java)
- Automatic refresh of client UI after server-side changes (SetPlatformDestinationPacket.java) 

## Data Persistence:
- Town data saved to world using Minecraft's SavedData system (TownSavedData.java)
- Thread-safe town storage using ConcurrentHashMap (TownSavedData.java)
- NBT serialization for all town data (TownSavedData.java)
- Automatic loading of town data when world loads (TownSavedData.java) 

## Town System:
- Town data structure with unique identifiers (Town.java)
- Population management based on bread resources (Town.java)
- Tourist capacity calculation based on town population (Town.java)
- Configurable tourist spawning settings (Town.java)
- Visit history tracking with timestamps and origin information (Town.java)
- Path creation for tourist navigation (Town.java)
- Configurable search radius for town features (Town.java)
- Visitor statistics tracking (Town.java)
- NBT serialization for town data persistence (Town.java) 

## Town Management System:
- Centralized town management through TownManager (TownManager.java)
- Server-level specific town management instances (TownManager.java)
- Persistent town data storage using Minecraft's SavedData system (TownManager.java)
- Town registration with minimum distance enforcement between towns (TownManager.java)
- UUID-based town identification for reliable referencing (TownManager.java)
- Resource management API for adding and updating town resources (TownManager.java)
- Complete town data serialization and deserialization (TownManager.java)
- Ghost town cleanup functionality to remove abandoned towns (TownManager.java)
- Server shutdown handling to ensure data persistence (TownManager.java)
- Thread-safe town data access (TownManager.java) 

## Client Setup System:
- Client-side event registration for mod features (ClientModEvents.java)
- Menu screen registration for town block interfaces (ClientModEvents.java)
- GUI overlay registration system (ClientModEvents.java)
- Town debug overlay integration (ClientModEvents.java)
- Debug network handler registration (ClientModEvents.java)
- Client-only event handling (ClientModEvents.java) 

## Platform System:
- Platforms for defining tourist arrival and departure points (Platform.java)
- Unique identifiers for reliable platform tracking (Platform.java)
- Customizable platform naming (Platform.java)
- Enable/disable functionality for individual platforms (Platform.java)
- Path positions with start and end points (Platform.java)
- Destination management system for inter-town travel (Platform.java)
- NBT serialization for data persistence (Platform.java)
- Complete path validation (Platform.java)
- Destination filtering by enabled status (Platform.java) 

## Tourist Vehicle System:
- Advanced vehicle management for tourists (TouristVehicleManager.java)
- Support for vanilla Minecraft minecarts (TouristVehicleManager.java)
- Integration with Create mod's train system (TouristVehicleManager.java)
- Vehicle stop detection based on position changes (TouristVehicleManager.java)
- Tourist-to-vehicle assignment algorithms (TouristVehicleManager.java)
- Configurable threshold for vehicle movement detection (TouristVehicleManager.java)
- Free seat detection in Create mod trains (TouristVehicleManager.java)
- Dynamic 3D search area calculation based on path points (TouristVehicleManager.java)
- Tourist filtering based on origin town (TouristVehicleManager.java)
- Automatic tracking of vehicle positions (TouristVehicleManager.java)
- Command-based integration with Create mod (TouristVehicleManager.java) 

## Configuration System:
- **ConfigLoader**: Comprehensive configuration system that manages all mod settings
  - Handles loading and saving of configuration from properties file
  - Vehicle configuration:
    - Support toggles for Create mod trains and vanilla minecarts
    - Vehicle search radius and movement thresholds
  - Town configuration:
    - Town naming system with default names
    - Population requirements and mechanics
    - Town spacing and starting parameters
  - Tourist configuration:
    - Tourist expiry system with configurable timeouts
    - Population-based tourist allocation
    - Tourist notification system
    - Tourism impact on town growth
- Automatic config file generation with defaults (ConfigLoader.java)
- Comprehensive town system configuration options (ConfigLoader.java)
- Tourist behavior configuration settings (ConfigLoader.java)
- Vehicle integration configuration options (ConfigLoader.java)
- Random town name generation from configurable list (ConfigLoader.java)
- Detailed configuration logging for troubleshooting (ConfigLoader.java)
- Runtime configuration reloading capability (ConfigLoader.java)
- Singleton configuration instance for global access (ConfigLoader.java) 

## Menu System:
- Container-based menu system for town block interaction (TownBlockMenu.java)
- Data synchronization between client and server (TownBlockMenu.java)
- Resource display and management interface (TownBlockMenu.java)
- Town statistics tracking and display (TownBlockMenu.java)
- Visit history integration for UI display (TownBlockMenu.java)
- Player inventory integration with town block (TownBlockMenu.java)
- Quick-move functionality for item transfer (TownBlockMenu.java)
- Forge menu type registration system (ModMenuTypes.java)
- Deferred registration for menu types (ModMenuTypes.java)
- Town data provider integration for consistent data access (TownBlockMenu.java) 

## API System:
- Platform-agnostic town data access interface (ITownDataProvider.java)
- Unified resource management API (ITownDataProvider.java)
- Legacy bread system compatibility (ITownDataProvider.java)
- Tourist management capabilities (ITownDataProvider.java)
- Path configuration methods (ITownDataProvider.java)
- Visit history tracking system (ITownDataProvider.java)
- Visitor statistics collection (ITownDataProvider.java)
- Standardized town data access methods (ITownDataProvider.java)
- Consistent data modification interface (ITownDataProvider.java)
- Embedded visit history record class (ITownDataProvider.java) 

## Block System:
- Town block implementation with custom block entity (TownBlock.java)
- Forge block entity registration system (ModBlockEntities.java)
- Town block placement validation with minimum distance check (TownBlock.java)
- Default platform creation on town block placement (TownBlock.java)
- Town block interaction with menu system (TownBlock.java)
- Random town name generation on placement (TownBlock.java)
- Town block entity with extensive functionality (TownBlockEntity.java)
- Resource management through item handler capability (TownBlockEntity.java)
- Tourist spawning and management system (TownBlockEntity.java)
- Platform creation and management (TownBlockEntity.java)
- Visit history tracking and recording (TownBlockEntity.java)
- Town data synchronization between client and server (TownBlockEntity.java)
- Search radius configuration and visualization (TownBlockEntity.java)
- Tourist vehicle integration (TownBlockEntity.java)
- Town cleanup on block removal (TownBlock.java) 

## Scoreboard System:
- Town statistics scoreboard implementation (TownScoreboardManager.java)
- Dynamic scoreboard objective creation (TownScoreboardManager.java)
- Town population display with status indicators (TownScoreboardManager.java)
- Visitor count tracking in scoreboard (TownScoreboardManager.java)
- Automatic scoreboard updates (TownScoreboardManager.java) 

## Command System:
- Town management commands (ClearTownsCommand.java)
- Admin-level permission requirements (ClearTownsCommand.java)
- Town clearing functionality (ClearTownsCommand.java)
- Command feedback with success messages (ClearTownsCommand.java) 

## Registry System:
- Block registration system (ModBlocks.java)
- Item registration system (ModBlocks.java)
- Deferred registration pattern (ModBlocks.java)
- Town block registration (ModBlocks.java)
- Block item registration (ModBlocks.java) 

## Resource Assets:
- Custom town block texture (town_block.png)
- Custom town block GUI texture (town_block_gui.png)
- Custom tourist hat texture for entity rendering (tourist_hat.png)
- Block models for town block (town_block.json)
- Item models for town block item (town_block.json)
- Blockstate definitions for town block (town_block.json)

## Localization:
- English language support with comprehensive UI text translations (en_us.json)
- Localized text for all UI components, buttons, and instructions
- Localized block and item names
- Localized status messages and tooltips

## Data Files:
- Town block crafting recipe using iron ingots (town_block.json)
- Town block loot table for proper block drops (town_block.json)
- Block tag for making town block mineable with pickaxe (pickaxe.json) 

## Event System:
- Forge event system for handling player interactions (ModEvents.java)
- Path creation event handling for tourist paths (ModEvents.java)
- Platform path creation with validation and feedback (PlatformPathHandler.java)
- Client-side event handling for UI registration (ClientModEvents.java)
- Debug overlay registration through Forge GUI system (ClientModEvents.java)
- Distance validation for path creation (PlatformPathHandler.java)
- User feedback messages during path creation (PlatformPathHandler.java)
- Automatic client notification when paths are created (PlatformPathHandler.java) 